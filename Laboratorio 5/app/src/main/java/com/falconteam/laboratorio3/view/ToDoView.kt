package com.falconteam.laboratorio3.viewimport android.util.Logimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Addimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material3.Buttonimport androidx.compose.material3.Cardimport androidx.compose.material3.DatePickerimport androidx.compose.material3.DatePickerDialogimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.FloatingActionButtonimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldimport androidx.compose.material3.TopAppBarimport androidx.compose.material3.rememberDatePickerStateimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.window.Dialogimport androidx.compose.ui.window.DialogPropertiesimport androidx.lifecycle.ViewModelimport androidx.navigation.NavControllerimport com.falconteam.laboratorio3.models.Cardimport com.falconteam.laboratorio3.models.Taskimport com.falconteam.laboratorio3.navigation.Screenimport com.falconteam.laboratorio3.ui.components.Cardsimport com.falconteam.laboratorio3.viewmodel.GeneralViewModelimport java.util.Date@OptIn(ExperimentalMaterial3Api::class)@Composablefun ToDoView(    viewModel: GeneralViewModel,    navController: NavController,    modifier: Modifier = Modifier,    ) {    val openDialog = remember { mutableStateOf(false) }    val newCard = remember { mutableStateOf(Card(0, "", "")) }    val openDateDialog = remember { mutableStateOf(false) }    // variable para observar los cambios en la lista de tareas    val tasks = viewModel.tasks.collectAsState()    Scaffold(        modifier = modifier            .fillMaxSize(),        topBar = { TopAppBar(            title = { Text("To Do") },            navigationIcon = {                IconButton(onClick = {                    navController.navigate(Screen.Home.route)                }) {                    Icon(Icons.Filled.ArrowBack, contentDescription = "Back")                }            }        ) },        floatingActionButton = {            FloatingActionButton(                onClick = {                    openDialog.value = true                }            ) {                Icon(                    imageVector = Icons.Default.Add,                    contentDescription = "Add",                    tint = Color.Black,                )            }        },    ) {        if (openDialog.value) {            Dialog(                properties = DialogProperties(                    dismissOnBackPress = true,                    dismissOnClickOutside = true,                ),                onDismissRequest = { openDialog.value = false },                content = {                    Card {                        Text(                            text = "Agregar tarea",                            style = MaterialTheme.typography.headlineSmall,                            modifier = Modifier                                .fillMaxWidth()                                .padding(vertical = 16.dp),                            textAlign = TextAlign.Center,                        )                        TextField(                            value = newCard.value.title,                            onValueChange = { newCard.value = newCard.value.copy(title = it) },                            label = { Text("Title") },                            placeholder = { Text("Title") },                            modifier = Modifier.padding(16.dp),                        )                        TextField(                            value = newCard.value.description,                            onValueChange = {                                newCard.value = newCard.value.copy(description = it)                            },                            label = { Text("Description") },                            placeholder = { Text("Description") },                            modifier = Modifier.padding(16.dp)                        )                        TextField(                            value = newCard.value.endDate.toString(),                            readOnly = true,                            onValueChange = { },                            label = { Text("Description") },                            placeholder = { Text("Description") },                            modifier = Modifier.padding(16.dp)                        )                        Button(                            onClick = {                                openDateDialog.value = true                            },                            modifier = Modifier.padding(16.dp)                        ) {                            Text("Select Date")                        }                        if (openDateDialog.value) {                            val datePickerState =                                rememberDatePickerState(initialSelectedDateMillis = Date().time)                            DatePickerDialog(                                onDismissRequest = {                                    openDateDialog.value = false                                },                                confirmButton = {                                    Button(onClick = {                                        openDateDialog.value = false                                        newCard.value = newCard.value.copy(                                            endDate = datePickerState.selectedDateMillis?.let {                                                Date(it)                                            } ?: Date()                                        )                                    }) {                                        Text("OK")                                    }                                },                                ) {                                DatePicker(state = datePickerState)                            }                        }                        Button(                            onClick = {                                // Creo una nueva instancia de la clase Task                                val task = Task(                                    id = newCard.value.pos,                                    title = newCard.value.title,                                    description = newCard.value.description,                                    endDate = newCard.value.endDate,                                    isCompleted = newCard.value.checked                                )                                // Agrego la tarea a la lista de tareas                                viewModel.addTask(task)                                newCard.value = Card(0, "", "")                                openDialog.value = false                            },                            modifier = Modifier.padding(16.dp)                        ) {                            Text("Add")                        }                    }                }            )        }        LazyColumn(            modifier = Modifier                .fillMaxSize()                .padding(horizontal = 16.dp, vertical = it.calculateTopPadding() + 16.dp),        ) {            items(tasks.value.size) { index ->                val task = tasks.value[index]                Log.d("Task", task.toString())                // Aqu√≠ se crea una tarjeta para cada tarea en la lista                Cards(                    pos = task.id,                    title = task.title,                    description = task.description,                    endDate = task.endDate,                    checked = task.isCompleted,                    max = 0,                )        }    }}}